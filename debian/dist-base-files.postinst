#!/bin/bash

## Copyright (C) 2012 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

if [ -f /usr/libexec/helper-scripts/pre.bsh ]; then
   source /usr/libexec/helper-scripts/pre.bsh
fi

set -e

true "
#####################################################################
## INFO: BEGIN: $DPKG_MAINTSCRIPT_PACKAGE $DPKG_MAINTSCRIPT_NAME $@
#####################################################################
"

check_linux_account_specific() {
   if command -v qubesdb-read >/dev/null 2>&1 ; then
      ## Leave user 'user' creation to Qubes.
      true "INFO: Skipping because Qubes detected."
      return 1
   fi

   ## Don't create a new user during distro morphing, only do it when building an ISO or VM image.
   if [ ! "$derivative_maker" = "true" ] && ! [ -f '/var/lib/dist-base-files/live_build' ]; then
      true "INFO: Skipping since not running under derivative-maker and /var/lib/dist-base-files/live_build does not exist (during the build process)."
      return 1
   fi

   true "INFO: Continuing..."
   return 0
}

add_linux_user_account_named_user() {
   if [ -f "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_1" ]; then
      return 0
   fi
   mkdir --parents "/var/lib/dist-base-files/do_once"

   if ! check_linux_account_specific ; then
      true "INFO: Skipping ${FUNCNAME}."
      return 0
   fi

   ## Qubes-Whonix build process: user "user" already exists.
   if id "$user_to_be_created" &>/dev/null ; then
      true "INFO: User '$user_to_be_created' already exists, skip creation."
      return 0
   fi

   ## adduser and addgroup
   ##
   ## Quoted from Debian adduser manpage:
   ##
   ## They are friendlier front ends to the low level tools like useradd, groupadd and usermod programs,
   ## by default choosing Debian policy conformant UID and GID values,  creating a home directory with
   ## skeletal configuration, running a custom script, and other features.
   ##
   ## https://forums.whonix.org/t/port-from-useradd-groupadd-and-usermod-to-adduser-and-addgroup/7977

   ## Use --no-create-home and leave home folder creation to pam mkhomedir
   ## https://phabricator.whonix.org/T913
   ## https://forums.whonix.org/t/bug-not-all-files-form-etc-skel-are-copied-to-home-user/6778/4
   ##
   ## old:
   #useradd --no-create-home --password "$password" --user-group --shell /bin/bash "$user_to_be_created"
   ##
   ## Prefer adduser rather than useradd.
   ##
   ## No need to user --user-group since this is Debian adduser default.
   ##
   ## Quote adduser man page:
   ## --disabled-password
   ## Do not run passwd(1) to set a password. In most situations, logins are still possible though
   ## (for example using SSH keys or through PAM) for reasons that are beyond adduser's scope.
   adduser --no-create-home --disabled-password --comment "" "$user_to_be_created"
   true "INFO: User created."

   touch "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_1"
}

password_empty_for_user_account_named_user() {
   if [ -f "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_1" ]; then
      return 0
   fi
   mkdir --parents "/var/lib/dist-base-files/do_once"

   if ! check_linux_account_specific ; then
      true "INFO: Skipping ${FUNCNAME}."
      return 0
   fi

   ## No longer in use.
   ##
   ## setting password to changeme
   ##
   ## How this password was created:
   ## sudo apt-get install whois
   ## mkpasswd
   ## changeme
   ## Resulted in: aTayYxVyw5kDo
   #password="aTayYxVyw5kDo"

   ## No longer in use.
   ## Use --encrypted to be able to use a static, precalculated hash for reproducible builds.
   #echo "${user_to_be_created}:${password}" | chpasswd --encrypted

   ## adduser '--disabled-password' is not the same as 'passwd --delete user'.
   ## /etc/shadow:
   #user:!:19932:0:99999:7:::

   ## Set empty password for user "user".
   passwd --delete "$user_to_be_created"
   ## /etc/shadow:
   #user::19932:0:99999:7:::

   touch "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_1"
}

add_groups_to_linux_user_account_named_user() {
   if [ -f "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_1" ]; then
      return 0
   fi
   mkdir --parents "/var/lib/dist-base-files/do_once"

   if ! check_linux_account_specific ; then
      true "INFO: Skipping ${FUNCNAME}."
      return 0
   fi

   ## security-misc: Console Lockdown.
   ## Make sure this group exists. Might not exist if security-misc is not (yet) installed.
   addgroup --system console
   addgroup --system ssh

   ## old:
   #usermod --append --groups cdrom,audio,dip,sudo,plugdev "$user_to_be_created"
   ##
   ## Prefer adduser over usermod.
   #adduser "$user_to_be_created" cdrom
   #adduser "$user_to_be_created" audio
   #adduser "$user_to_be_created" dip
   #adduser "$user_to_be_created" plugdev

   ## TODO: No longer add user to group "sudo" by default.
   ## https://www.kicksecure.com/wiki/Dev/user-admin-split
   ## NOTE: Would be cleaner, but actually not important, because limited users
   ##       such as user "user" will not be able to access 'sudo' anymore
   ##       anyhow because 'sudo' will be no longer executable by limited users.
   ##       This also applies to other Priviledge Escalation Tools such as 'pkexec'.
   ##       This simplifies migration, testing of the user-admin-split package.
   ##
   ## Required by 'debian/security-misc.preinst' function 'sudo_users_check'.
   adduser "$user_to_be_created" sudo

   ## security-misc: Console Lockdown.
   adduser "$user_to_be_created" console
   adduser "$user_to_be_created" ssh

   touch "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_1"
}

console_lockdown() {
   if [ -f "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_1" ]; then
      return 0
   fi
   mkdir --parents "/var/lib/dist-base-files/do_once"

   if ! check_linux_account_specific ; then
      true "INFO: Skipping ${FUNCNAME}."
      return 0
   fi

   ## No longer enable pam mkhomedir here.
   ## This is done by the security-misc package. File:
   ## /usr/share/pam-configs/mkhomedir-security-misc
   ## pam-auth-update --enable mkhomedir

   ## By package security-misc.
   pam-auth-update --enable console-lockdown-security-misc

   ## In Qubes and for existing installations Console Lockdown is
   ## is handled by legacy-dist package.

   touch "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_1"
}

lock_root_account() {
   if [ -f "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_1" ]; then
      return 0
   fi
   mkdir --parents "/var/lib/dist-base-files/do_once"

   if ! check_linux_account_specific ; then
      true "INFO: Skipping ${FUNCNAME}."
      return 0
   fi

   ## https://www.whonix.org/wiki/Root
   ## https://www.whonix.org/wiki/Dev/Strong_Linux_User_Account_Isolation

   ## Lock the account.
   passwd --lock "$account_to_be_locked"

   ## Disabled because it breaks `adduser`.
   ## https://forums.whonix.org/t/restrict-root-access/7658/59
   ## Expire the account to prevent SSH login.
   ## https://www.cyberciti.biz/faq/linux-locking-an-account/
   #chage --expiredate 0 "$account_to_be_locked"

   ## Debugging.
   #chage --list "$account_to_be_locked"

   ## To undo:
   #sudo chage --expiredate -1 "$account_to_be_locked"
   #sudo passwd

   touch "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_1"
}

zsh_yes_or_no() {
   zsh_enable=""
   if [ -f "/etc/nozsh" ]; then
      echo "$0: INFO: No shell change because file /etc/nozsh exists, ok."
      zsh_enable=no
      return 0
   fi
   if [ -f "/usr/local/etc/nozsh" ]; then
      echo "$0: INFO: No shell change because file /usr/local/etc/nozsh exists, ok."
      zsh_enable=no
      return 0
   fi

   if grep -q 'nozsh' /proc/cmdline; then
      echo "$0: INFO: No shell change because nozsh in kernel command line, ok."
      zsh_enable=no
      return 0
   fi

   if ! test -x /usr/bin/zsh ; then
      echo "$0: INFO: No shell change because /usr/bin/zsh does not exist or is not executable, ok."
      zsh_enable=no
      return 0
   fi

   zsh_enable=yes
}

user_shell_to_zsh() {
   if [ -f "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_3" ]; then
      return 0
   fi
   mkdir --parents "/var/lib/dist-base-files/do_once"

   if [ ! "$zsh_enable" = "yes" ]; then
      return 0
   fi

   local user_list user_list
   user_list="root $user_to_be_created"

   for user_item in $user_list ; do
      if ! id "$user_item" &>/dev/null ; then
         echo "$0: INFO: user '$user_item' does not exist. Not setting shell to zsh."
         continue
      fi

      ## Use getent to retrieve the user's entry from /etc/passwd
      user_passwd_entry=$(getent passwd "$user_item")

      ## Extract the shell field (the last field) from the user's entry
      user_default_shell=$(echo "$user_passwd_entry" | awk -F: '{print $NF}')

      if [ "$user_default_shell" = "/usr/bin/zsh" ]; then
         touch "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_3"
         continue
      fi

      echo "$0: INFO: Setting shell for user '$user_item' to zsh."
      if ! chsh --shell /usr/bin/zsh "$user_item" ; then
         echo "$0: ERROR: Command 'chsh --shell /usr/bin/zsh $user_item' failed. This is only a minor issue."
      fi
      echo "$0: INFO: For more information, see: https://www.kicksecure.com/shell#default"

      touch "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_3"
   done
}

## Define variables here to make this easier to software fork.
user_to_be_created="user"
account_to_be_locked="root"

case "$1" in
   configure)
      true "INFO: Configuring $DPKG_MAINTSCRIPT_PACKAGE..."

      build_version_file="/var/lib/dist-base-files/build_version"
      if [ ! -f "$build_version_file" ]; then
         ## Sanity test.
         if [ "$dist_build_version" = "" ]; then
            ## Package dpkg-dev provides dpkg-parsechangelog.
            ## If dist_build_version is empty, use the version number of the package.
            dist_build_version="$(zless "/usr/share/doc/$DPKG_MAINTSCRIPT_PACKAGE/changelog.Debian.gz" | dpkg-parsechangelog -l- -SVersion)" || true
         fi
         if [ "$dist_build_version" = "" ]; then
            echo "ERROR: Could not determine variable 'dist_build_version'."
         else
            mkdir --parents "$(dirname "$build_version_file")"
            echo "INFO: Logging dist_build_version '$dist_build_version' to '$build_version_file'..."
            ## Debugging.
            touch "$build_version_file"
            ## Logging.
            echo "$dist_build_version" | tee "$build_version_file" >/dev/null
            ## Debugging.
            cat "$build_version_file"
         fi
      fi

      add_linux_user_account_named_user
      password_empty_for_user_account_named_user
      add_groups_to_linux_user_account_named_user
      console_lockdown
      lock_root_account

      zsh_yes_or_no
      true "zsh_enable: $zsh_enable"

      if [ "$zsh_enable" = "yes" ]; then
         user_shell_to_zsh
      fi

      true "INFO: End configuring $DPKG_MAINTSCRIPT_PACKAGE."

      ;;

   *)
      ;;
esac

true "INFO: debhelper beginning here."

#DEBHELPER#

true "INFO: Done with debhelper."

true "
#####################################################################
## INFO: END  : $DPKG_MAINTSCRIPT_PACKAGE $DPKG_MAINTSCRIPT_NAME $@
#####################################################################
"

## Explicitly "exit 0", so eventually trapped errors can be ignored.
exit 0
