#!/bin/bash

## Copyright (C) 2012 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

if [ -f /usr/libexec/helper-scripts/pre.bsh ]; then
   source /usr/libexec/helper-scripts/pre.bsh
fi

set -e

true "
#####################################################################
## INFO: BEGIN: $DPKG_MAINTSCRIPT_PACKAGE $DPKG_MAINTSCRIPT_NAME $@
#####################################################################
"

zsh_yes_or_no() {
   zsh_enable=""
   if [ -f "/etc/nozsh" ]; then
      echo "$0: INFO: No shell change because file /etc/nozsh exists, ok."
      zsh_enable=no
      return 0
   fi
   if [ -f "/usr/local/etc/nozsh" ]; then
      echo "$0: INFO: No shell change because file /usr/local/etc/nozsh exists, ok."
      zsh_enable=no
      return 0
   fi

   if grep -q 'nozsh' /proc/cmdline; then
      echo "$0: INFO: No shell change because nozsh in kernel command line, ok."
      zsh_enable=no
      return 0
   fi

   if ! test -x /usr/bin/zsh ; then
      echo "$0: INFO: No shell change because /usr/bin/zsh does not exist or is not executable, ok."
      zsh_enable=no
      return 0
   fi

   zsh_enable=yes
}

user_shell_to_zsh() {
   if [ -f "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_2" ]; then
      return 0
   fi

   if [ ! "$zsh_enable" = "yes" ]; then
      return 0
   fi

   if ! id "$user_to_be_created" &>/dev/null ; then
      echo "$0: INFO: user '$user_to_be_created' does not exist. Not setting shell to zsh."
      return 0
   fi

   echo "$0: INFO: Setting shell for user '$user_to_be_created' to zsh."
   if ! chsh --shell /usr/bin/zsh "$user_to_be_created" ; then
      echo "$0: ERROR: Command 'chsh --shell /usr/bin/zsh user' failed. This is only a minor issue."
   fi
   echo "$0: INFO: For more information, see: https://www.kicksecure.com/shell#default"

   mkdir --parents "/var/lib/dist-base-files/do_once"
   touch "/var/lib/dist-base-files/do_once/${FUNCNAME}_version_2"
}

## Define variables here to make this easier to software fork.
user_to_be_created="user"
account_to_be_locked="root"

case "$1" in
   configure)
      true "INFO: Configuring $DPKG_MAINTSCRIPT_PACKAGE..."

      build_version_file="/var/lib/dist-base-files/build_version"
      if [ ! -f "$build_version_file" ]; then
         ## Sanity test.
         if [ "$dist_build_version" = "" ]; then
            ## Package dpkg-dev provides dpkg-parsechangelog.
            ## If dist_build_version is empty, use the version number of the package.
            dist_build_version="$(zless "/usr/share/doc/$DPKG_MAINTSCRIPT_PACKAGE/changelog.Debian.gz" | dpkg-parsechangelog -l- -SVersion)" || true
         fi
         if [ "$dist_build_version" = "" ]; then
            echo "ERROR: Could not determine variable 'dist_build_version'."
         else
            mkdir --parents "$(dirname "$build_version_file")"
            echo "INFO: Logging dist_build_version '$dist_build_version' to '$build_version_file'..."
            ## Debugging.
            touch "$build_version_file"
            ## Logging.
            echo "$dist_build_version" | tee "$build_version_file" >/dev/null
            ## Debugging.
            cat "$build_version_file"
         fi
      fi

      zsh_yes_or_no

      ## setting password to changeme
      ##
      ## How this password was created:
      ## sudo apt-get install whois
      ## mkpasswd
      ## changeme
      ## Resulted in: aTayYxVyw5kDo
      password="aTayYxVyw5kDo"

      if [ "$zsh_enable" = "yes" ]; then
         shell_maybe="--shell /bin/zsh"
      fi

      ## Qubes-Whonix build process: user "user" already exists.
      if id "$user_to_be_created" &>/dev/null ; then
         true "INFO: User '$user_to_be_created' already exists, skip creation."
      else
         if command -v qubesdb-read >/dev/null 2>&1 ; then
            ## Leave user 'user' creation to Qubes.
            true "INFO: Not creating user '$user_to_be_created' since Qubes detected."
         else
            ## No longer enable pam mkhomedir here.
            ## This is done by the security-misc package. File:
            ## /usr/share/pam-configs/mkhomedir-security-misc
            ## pam-auth-update --enable mkhomedir

            ## adduser and addgroup
            ##
            ## Quoted from Debian adduser manpage:
            ##
            ## They are friendlier front ends to the low level tools like useradd, groupadd and usermod programs,
            ## by default choosing Debian policy conformant UID and GID values,  creating a home directory with
            ## skeletal configuration, running a custom script, and other features.
            ##
            ## https://forums.whonix.org/t/port-from-useradd-groupadd-and-usermod-to-adduser-and-addgroup/7977

            ## Use --no-create-home and leave home folder creation to pam mkhomedir
            ## https://phabricator.whonix.org/T913
            ## https://forums.whonix.org/t/bug-not-all-files-form-etc-skel-are-copied-to-home-user/6778/4
            ##
            ## old:
            #useradd --no-create-home --password "$password" --user-group --shell /bin/bash "$user_to_be_created"
            ##
            ## Prefer adduser rather than useradd.
            ##
            ## No need to user --user-group since this is Debian adduser default.
            ##
            ## Quote adduser man page:
            ## --disabled-password
            ## Do not run passwd(1) to set a password. In most situations, logins are still possible though
            ## (for example using SSH keys or through PAM) for reasons that are beyond adduser's scope.
            adduser $shell_maybe --no-create-home --disabled-password --gecos "" "$user_to_be_created"

            ## Use --encrypted to be able to use a static, precalculated hash for reproducible builds.
            echo "${user_to_be_created}:${password}" | chpasswd --encrypted

            ## security-misc: Console Lockdown.
            ## Make sure this group exists. Might not exist if security-misc is not (yet) installed.
            addgroup --system console
            addgroup --system ssh

            ## old:
            #usermod --append --groups cdrom,audio,dip,sudo,plugdev "$user_to_be_created"
            ##
            ## Prefer adduser over usermod.
            adduser "$user_to_be_created" cdrom
            adduser "$user_to_be_created" audio
            adduser "$user_to_be_created" dip
            adduser "$user_to_be_created" plugdev

            ## Required by security-misc preinst.
            adduser "$user_to_be_created" sudo

            ## security-misc: Console Lockdown.
            adduser "$user_to_be_created" console
            adduser "$user_to_be_created" ssh

            ## By package security-misc.
            pam-auth-update --enable console-lockdown-security-misc

            ## In Qubes and for existing installations Console Lockdown is
            ## is handled by legacy-dist package.

            ## https://www.whonix.org/wiki/Root
            ## https://www.whonix.org/wiki/Dev/Strong_Linux_User_Account_Isolation

            ## Lock the account.
            passwd --lock "$account_to_be_locked"

            ## Disabled because it breaks `adduser`.
            ## https://forums.whonix.org/t/restrict-root-access/7658/59
            ## Expire the account to prevent SSH login.
            ## https://www.cyberciti.biz/faq/linux-locking-an-account/
            #chage --expiredate 0 "$account_to_be_locked"

            ## Debugging.
            #chage --list "$account_to_be_locked"

            ## To undo:
            #sudo chage --expiredate -1 "$account_to_be_locked"
            #sudo passwd
         fi
      fi

      ## https://forums.whonix.org/t/change-default-shell-from-bash-to-zsh-by-default/14792/41
      ## Needed for:
      ## - existing builds
      ## - Qubes-Whonix
      ## Doing this for all existing builds would cause the zsh newuser module to appear
      ## for existing builds when upgrading.
      ## https://forums.whonix.org/t/change-default-shell-from-bash-to-zsh-by-default/14792/37
      #user_shell_to_zsh

      true "INFO: End configuring $DPKG_MAINTSCRIPT_PACKAGE."

      ;;

   *)
      ;;
esac

true "INFO: debhelper beginning here."

#DEBHELPER#

true "INFO: Done with debhelper."

true "
#####################################################################
## INFO: END  : $DPKG_MAINTSCRIPT_PACKAGE $DPKG_MAINTSCRIPT_NAME $@
#####################################################################
"

## Explicitly "exit 0", so eventually trapped errors can be ignored.
exit 0
